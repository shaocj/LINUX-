linux操作系统静态库
　　linux 中的函数库分有两种：静态库和共享库。可以从库文件的后缀区分它们，后缀为.a的代表静态库，以.so为后缀的代表共享库。为了了解关于库，我们下面创建一个静态库，然后在程序中使用它。

　　一、静态库

　　1.建立一个fred.c的文件在里面我们写入如下代码：

　　[root@M2_test_192.168.8.93_61618_A code]# vim fred.c

　　#include

　　void fred(int arg){

　　printf("fred:you passed %d \n",arg);

　　}

　　2.再建立一个bill.c的文件，在里面也写入一些代码

　　[root@M2_test_192.168.8.93_61618_A code]# vim bill.c

　　#include

　　void bill(char *arg){

　　printf("bill:you passed %s \n",arg);

　　}

　　然后分别编译这两个函数，产生要包含在库文件中的目标文件

　　[root@M2_test_192.168.8.93_61618_A code]# gcc -c bill.c fred.c

　　这里gcc通过-c选项来阻止编译器创建一个完整的程序，如果试图创建一个完整的程序将不会成功，因为我们还为定义main函数

　　下面我们开始编写一个调用bill函数的程序。首先，为我们的库文件创建一个头文件，这个头文件将声明我们的库文件中的函数，
  它应该被所希望使用我们库文件的应用程序所包含。

　　3.创建lib.h头文件：

　　[root@M2_test_192.168.8.93_61618_A code]# vim lib.h

　　void bill(char *);

　　void fred(int);

　　4.编写一个名为program.c的程序，他包含库的头文件并且调用库中的一个函数

　　[root@M2_test_192.168.8.93_61618_A code]# vim program.c

　　#include "lib.h"

　　int main()

　　{

　　bill("Hello World");

　　return 0;

　　}

　　5.我们开始编译这个程序，我们暂时为编译器显示指定目标文件，然后要求编译器编译我们的文件并将其与预先编译好的目标
  模块bill.o链接

　　[root@M2_test_192.168.8.93_61618_A code]# gcc -c program.c

　　[root@M2_test_192.168.8.93_61618_A code]# gcc -o program program.o bill.o

　　[root@M2_test_192.168.8.93_61618_A code]# ./program

　　bill:you passed Hello World

　　6.现在我们创建并使用一个库文件，静态库文件也称作归档文件，都是以.a结尾的，可以通过file命令查看：

　　[root@M2_test_192.168.8.93_61618_A code]# file /lib/libdevmapper.a

　　/lib/libdevmapper.a: current ar archive

　　创建这样的静态库文件需要用ar命令，将我们创建好的函数文件添加进到归档文件(静态库文件)libfoo.a中

　　[root@M2_test_192.168.8.93_61618_A code]# ar crv libfoo.a bill.o fred.o

　　a - bill.o

　　a - fred.o

　　库文件创建好了，某些系统可能需要为函数库生成一个内容表，我们通过ranlib命令来完成这一任务，linux中，如果我们
  使用GNU的软件开发工具，这一步是不必需的，但是做了也无妨

　　[root@M2_test_192.168.8.93_61618_A code]# ranlib libfoo.a

　　现在我们的静态函数库可以使用了

　　[root@M2_test_192.168.8.93_61618_A code]# gcc -o program program.c libfoo.a

　　[root@M2_test_192.168.8.93_61618_A code]# ./program

　　bill:you passed Hello World

　　也可以使用-l选项来访问我们的函数库，但是因为其未保存到标准位置，所以我们必须要用-L选项来指示编译器在何处可以找到函数库

　　[root@M2_test_192.168.8.93_61618_A code]# gcc -o program program.c -L. -lfoo

　　[root@M2_test_192.168.8.93_61618_A code]# ./program

　　bill:you passed Hello World
  二、共享库

　　静态库有一个缺点，当我们同时运行许多程序，并且他们都是用来自同一个函数库的函数时，就会在内存中有同一个函数的多份拷贝，在程序文件自身也有多份同样的拷贝，将消耗大量宝贵的内存和磁盘空间。

　　linux支持共享库，它克服了上述不足。共享库和静态库保存位置是一样的，文件后缀不一样，共享库是以.so结尾的。与静态库不同，程序使用静态库的时候，程序本身不会包含函数的代码，而是引用运行时可以访问的共享代码。当编译好的程序被装载到内存中执行时，函数引用被解析并产生对共享库的调用，如果有必要共享库才被加载到内存中。通过这种方法，系统可只保留一份拷贝并供许多程序同时引用，并且在磁盘上也仅保留一份。

　　我们可以这么说，引用静态可库的程序本身在编译的时候连接器会把引用的函数复制到程序中，即程序包含执行所需的所有函数 
  ， 换句话说，它们是“完整的”。因为这一原因，这样的程序一旦编译以后，就不依赖任何外部库就可以运行了。但是共享库不同，
  编译完程序以后，引用过共享库的程序要正确执行，引用的外部库一定要存在，否则执行程序必然失败。

　　ldd 命令来确定某一特定可执行程序是否引用共享库。如下

　　[root@M2_test_192.168.8.93_61618_A code]# ldd program

　　libc.so.6 => /lib64/libc.so.6 (0x0000003485600000)

　　/lib64/ld-linux-x86-64.so.2 (0x0000003485200000)

　　因为我们的静态函数库本身又引用了stdio.h，这个头文件使用的printf这个函数是从共享库 /lib64/libc.so.6的引用的，
  至于还有一个叫/lib64/ld-linux-x86-64.so.2的共享库，这个后面我们会具体了解下它。

　　我们再来看看，同样功能的两个程序，一个可能是引用静态库，另外一个引用了共享库

　　[root@M2_test_192.168.8.93_61618_A code]# ldd /sbin/sln

　　not a dynamic executable

　　[root@M2_test_192.168.8.93_61618_A code]# ldd /bin/ln

　　libc.so.6 => /lib64/libc.so.6 (0x0000003485600000)

　　/lib64/ld-linux-x86-64.so.2 (0x0000003485200000)

　　第一个是一个完整的，不依赖外部库的程序，通过ldd以后提示不是一个动态链接的可执行程序，后面一个引用了两个共享库，我们再来看这两个程序的大小

　　[root@M2_test_192.168.8.93_61618_A code]# ll -h /sbin/sln

　　-rwxr-xr-x 1 root root 605K Jun 8 2010 /sbin/sln

　　[root@M2_test_192.168.8.93_61618_A code]# ll -h /bin/ln

　　-rwxr-xr-x 1 root root 32K Mar 1 2010 /bin/ln

　　很明显，不引用外部共享库的要比引用外部共享库的大10倍左右，这是因为引用共享库的程序是不完整的程序，它依靠外部共享
  库来提供运行所需的许多函数。

　　三、动态装入器

　　如果程序中引用外部共享库，那么需要一个动态装入器(dynamic loader)，它负责装载共享库并解析客户程序函数引用，在linux中，这个装载器是ld.so，也有可能是ld-linux.so.2或者ld-lsb.so.1，它实际上是你在 ln 的 ldd 清单中看到的作为共享库相关性列出的 ld-linux.so.2 库。下面我们迅速查看一下动态装入器如何在系统上找到适当的共享库。

　　动态装入器找到共享库要依靠两个文件 ： /etc/ld.so.conf 和 /etc/ld.so.cache。如果你对 /etc/ld.so.conf 文件进行 cat 操作，您可能会看到一个与下面类似的清单：

　　[root@M2_test_192.168.8.93_61618_A code]# cat /etc/ld.so.conf

　　include ld.so.conf.d/*.conf

　　[root@M2_test_192.168.8.93_61618_A code]# cat /etc/ld.so.conf.d/usr_local_lib.conf

　　/usr/local/lib

　　ld.so.conf 文件包含一个所有目录(/lib 和 /usr/lib 除外，它们会自动包含在其中)的清单，动态装入器将在其中查找共享库。但是在动态装入器能“看到”这一信息之前，必须将它转换到 ld.so.cache 文件中。可以通过运行 ldconfig 命令做到这一点：

　　[root@M2_test_192.168.8.93_61618_A code]# ldconfig

　　当 ldconfig 操作结束时，您会有一个最新的 /etc/ld.so.cache 文件，它反映您对 /etc/ld.so.conf 所做的更改。从这一
  刻起，动态装入器在寻找共享库时会查看您在 /etc/ld.so.conf 中指定的所有新目录。

　　四、ldconfig 技巧

　　要查看 ldconfig 可以“看到”的所有共享库，请输入：

　　[root@M2_test_192.168.8.93_61618_A code]# ldconfig -p | less

　　413 libs found in cache `/etc/ld.so.cache'

　　libz.so.1 (libc6,x86-64) => /lib64/libz.so.1

　　libz.so.1 (libc6,x86-64) => /usr/lib64/libz.so.1

　　libz.so.1 (libc6) => /lib/libz.so.1

　　libz.so.1 (libc6) => /usr/lib/libz.so.1

　　libz.so (libc6,x86-64) => /lib64/libz.so

　　libz.so (libc6,x86-64) => /usr/lib64/libz.so

　　libz.so (libc6) => /lib/libz.so

　　libz.so (libc6) => /usr/lib/libz.so

　　libxml2.so.2 (libc6,x86-64) => /usr/lib64/libxml2.so.2

　　libwrap.so.0 (libc6,x86-64) => /lib64/libwrap.so.0

　　libwrap.so (libc6,x86-64) => /usr/lib64/libwrap.so

　　libvolume_id.so.0 (libc6,x86-64) => /lib64/libvolume_id.so.0

　　libuuid.so.1 (libc6,x86-64) => /lib64/libuuid.so.1

　　libuuid.so.1 (libc6) => /lib/libuuid.so.1

　　..... (还有很多)

　　还有另一个方便的技巧可以用来配置共享库路径。有时候你希望告诉动态装入器在尝试任何 /etc/ld.so.conf 路径以前先尝试
  使用特定目录中的共享库。在您运行的较旧的应用程序不能与当前安装的库版本一起工作的情况下，这会比较方便。要指示动态装
  入器首先检查某个目录，请将 LD_LIBRARY_PATH 变量设置成您希望搜索的目录。多个路径之间用逗号分隔;例如：

　　[root@M2_test_192.168.8.93_61618_A code]# export LD_LIBRARY_PATH="/usr/lib/old:/opt/lib"

　　导出 LD_LIBRARY_PATH 后，如有可能，所有从当前 shell 启动的可执行程序都将使用 /usr/lib/old 或 /opt/lib 中的库，
  如果仍不能满足一些共享库相关性要求，则转回到 /etc/ld.so.conf 中指定的库。
  
  0.前言
    在较为复杂的项目中会利用到交叉编译得到的共享库（*.so文件）。在这种情况下便会产生以下疑问，例如：
    【1】交叉编译时的共享库是否需要放置于目标板中，如果需要放置在哪个目录中。
    【2】交叉编译时的共享库是否需要放置于宿主机中，如果需要放置于哪个目录中。
    【3】交叉编译时如何指定共享库
    【4】程序运行时如何查找共享库
    等等问题。
    
    博文总结了使用共享库的一般方法，并通过一个例子说明问题。如果已经有了交叉编译好的共享库，可以从【2】开始，步骤【1】只是为了说明问题，捏造一个简单的共享库试图说明问题。
    【1】交叉编译获得链接库
    【2】交叉编译源文件并加入链接库
    【3】移动动态链接库
    【4】执行

    【必要说明】
    【宿主机】Ubuntu 14.04 AMD64
    【目标板】树莓派
    
    【相关博文】
    【例说makefile索引博文】
    【树莓派学习笔记——交叉编译工具链】

    【代码仓库】——makefile-example
    代码仓库位于bitbucket，可借助TortoiseHg（GUI工具）克隆代码或者在网页中直接下载zip包。    

1.交叉编译获得动态链接库
    本例先制作一个非常简单的共享库，共享库包含两个API——add和sub。
    【libtest.h】
    指定接口，给出相应声明
#ifndef __LIBTEST_H
#define __LIBTEST_H
int sub(int a, int b);
int add(int a, int b);
#endif
    【test-add.c】
int add(int a, int b)
{
    return a+b;
}
    【test-sub.c】
int sub(int a, int b)
{
    return a-b;
}
    【makefile】
    在同目录下包含makefile文件，请替换其中的[tab]，并以代码仓库中的makefile文件为主。编译完成之后，把libtest.so移动到上级lib目录中。请注意此时的交叉工具链为arm-linux-gnueabihf-gcc
 ，目标b
# 指令编译器和选项
CC = arm-linux-gnueabihf-gcc
CFLAGS = -Wall -std=gnu99
# 目标文件
TARGET = libtest.so
# C文件
SRCS = test-add.c test-sub.c
# 目标文件
OBJS = $(SRCS:.c=.o)
# 链接为可执行文件
$(TARGET):$(OBJS)
[tab]$(CC) -shared -o $@ $^
[tab]mv $(TARGET) ../lib
clean:
[tab]rm -rf $(TARGET) $(OBJS)
# 编译规则 $@代表目标文件 $< 代表第一个依赖文件
%.o:%.c
[tab]$(CC) $(CFLAGS) -o $@ -fPIC -c $<
    【必要的验证】
    使用file指令查看libtest.so信息。
    file libtest.so
libtest.so: ELF 32-bit LSB  shared object, ARM, EABI5 version 1 (SYSV), dynamically linked, BuildID[sha1]=e22558b8cf089b92e5534b636c6d501f1cc54581, not stripped
    从控制台的输出信息可以看出，libtest.so运行于ARM平台，而不是宿主机的AMD64平台。

2.交叉编译源文件并加入动态链接库
    【源文件】
#include <stdio.h>
#include <libtest.h>
int main(void)
{
    int a = 3;
    int b = 2;
       
    printf("a=%d\n", a);
    printf("b=%d\n", b);
   
    printf("a+b=%d\n", add(a, b));
    printf("a-b=%d\n", sub(a, b));
    return 0;
}
    【makefile文件】    
# 指定编译器和选项
# 指定树莓派交叉编译器
CC = arm-linux-gnueabihf-gcc
CFLAGS = -Wall -std=gnu99
# 目标文件
TARGET = test
# C文件
SRCS = test.c
# 头文件查找路径
INC = -I.
# 库文件和库查找路径
DLIBS = -ltest
LDFLAGS = -L./lib
# 目标文件
OBJS = $(SRCS:.c=.o)
# 链接为可执行文件
$(TARGET):$(OBJS)
[tab]$(CC) -o $@ $^ $(LDFLAGS) $(DLIBS)
clean:
[tab]rm -rf $(TARGET) $(OBJS)
# 编译规则 $@代表目标文件 $< 代表第一个依赖文件
%.o:%.c
[tab]$(CC) $(CFLAGS) $(INC) -o $@ -c $<
    【说明】
    【1】交叉工具链为arm-linux-gnueabihf-gcc
    【2】指定了交叉编译之后的共享库和共享库路径，链接共享库使用-ltest，共享库位于lib目录下。请注意-ltest对应libtest.so。
    【3】make之后可获得可执行文件，通过file test查看信息。
test: ELF 32-bit LSB  executable, ARM, EABI5 version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.26, BuildID[sha1]=88e4142dceabd295369657b29757141f98a03753, not stripped
    从控制台的输出可以看出，该可执行文件运行平台为ARM，而不是AMD64。

3.移动动态链接库
    【移动共享库至目标板/usr/lib目录中】
    通过FTP工具把共享库传输至树莓派中，然后通过cp指令复制到/usr/lib中
    sudo cp libtest.so /usr/lib
    linux系统中默认的搜多路径为/lib和/usr/lib，libtest.so可以复制到任何目录中。
    修改libtest.so的执行权限。
    sudo chmod 775 libtest.so

4.执行
    【FTP上传】
    通过FTP工具把可执行文件test复制到树莓派中，然后通过ldd指令查看共享库链接状态。
    【检验】
    ldd test
/usr/lib/arm-linux-gnueabihf/libcofi_rpi.so (0xb6f7f000)
libtest.so => /usr/lib/libtest.so (0xb6f6b000)
libc.so.6 => /lib/arm-linux-gnueabihf/libc.so.6 (0xb6e3b000)
/lib/ld-linux-armhf.so.3 (0xb6f8d000)
    从控制台的输出可以看出，test成功链接了位于/usr/lib中的libtest.so

    【执行】
    ./test
a=3
b=2
a+b=5
a-b=1
    从执行结果看，前面所做的努力是正确的。

5.总结
    回答在前言中的问题。
    【1】交叉编译时的共享库是否需要放置于目标板中，如果需要放置在哪个目录中。
    交叉编译之后的共享库需要复制到目标板中，最好放置于/usr/lib或/lib中，当然也有其他的方法，在这里不详细说明。

    【2】交叉编译时的共享库是否需要放置于宿主机中，如果需要放置于哪个目录中。
    交叉编译时确切的说链接过程中需要指定共享库的问题，通过-L指定目录，通过-l指定共享库名称。但是此时交叉编译的共享库最好不要放置于宿主机的/lib或/usr/lib中，以免产生混淆。
    综合【1】和【2】，libtest.so同时存在于目标板和宿主机中。

    【3】交叉编译时如何指定共享库
    通过-L指定目录，通过-l指定共享库名称

    【4】程序运行时如何查找共享库
    最直观的方法，复制到/usr/lib目录中，让linux系统自动查找。
